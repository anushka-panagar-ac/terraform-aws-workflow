name: Build Test and Deploy Settlement
on:
  workflow_dispatch:
  push:
    branches:
      - 'release/*'
      - 'develop'

env:
  AWS_REGION: us-west-2
  JAVA_VERSION: 21

permissions:
  id-token: write
  contents: read
  packages: read

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "::set-output name=environment::Prod"
          elif [[ "${{ github.ref }}" == "refs/heads/release/"* ]]; then
            echo "::set-output name=environment::Qut"
          else
            echo "::set-output name=environment::Dev"
          fi

  build-and-push-ecr:
    needs: setup
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.setup.outputs.environment }}
    env:
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      TERRAFORM_BACKEND_PATH: ${{ vars.TERRAFORM_BACKEND_PATH }}
      TERRAFORM_TFVARS_PATH: ${{ vars.TERRAFORM_TFVARS_PATH }}
      AWS_URL: ${{ vars.AWS_URL }}
      BUILD_NUMBER: ${{ github.run_number }}
    outputs:
      version: ${{ steps.extract-gradle-version.outputs.version }}
    steps:
      - name: Echo Environment Variables
        run: |
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "AWS_ROLE_ARN: ${{ env.AWS_ROLE_ARN }}"
          echo "TERRAFORM_BACKEND_PATH: ${{ env.TERRAFORM_BACKEND_PATH }}"
          echo "TERRAFORM_TFVARS_PATH: ${{ env.TERRAFORM_TFVARS_PATH }}"
          echo "AWS_URL: ${{ env.AWS_URL }}"
          echo "BUILD_NUMBER: ${{ env.BUILD_NUMBER }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure settlement aws credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: ECR terraform setup
        run: |
          cd terraform
          terraform init -reconfigure --backend-config $TERRAFORM_BACKEND_PATH
          terraform plan -var-file=$TERRAFORM_TFVARS_PATH -target=module.ecr -out=ecr.tfplan
        continue-on-error: false

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Run Test
        run: ./gradlew test
        continue-on-error: false

      - name: ECR Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve ecr.tfplan

      - name: Extract Release Version
        id: extract_version
        run: echo "::set-output name=version::$(echo ${GITHUB_REF#refs/heads/release/})"

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ./gradlew "-Pimage_tag=${IMAGE_TAG:-snapshot}" "-Pbuild_number=${BUILD_NUMBER}" dockerPush --stacktrace

      - name: Extract Version from build.gradle
        id: extract-gradle-version
        run: |
          VERSION=$(./gradlew "-Pbuild_number=${BUILD_NUMBER}" -q printVersion)
          echo "Extracted version: $VERSION"
          echo "::set-output name=version::$VERSION"

  deploy-ecs:
    needs: [setup, build-and-push-ecr]
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.setup.outputs.environment }}
    env:
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      TERRAFORM_BACKEND_PATH: ${{ vars.TERRAFORM_BACKEND_PATH }}
      TERRAFORM_TFVARS_PATH: ${{ vars.TERRAFORM_TFVARS_PATH }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.7.5

      - name: Terraform setup
        run: |
          cd terraform
          terraform init -reconfigure --backend-config $TERRAFORM_BACKEND_PATH
          terraform plan -var-file=$TERRAFORM_TFVARS_PATH -var "image_tag=${{ needs.build-and-push-ecr.outputs.version }}" -out=plan.tfplan
        continue-on-error: false

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve plan.tfplan
